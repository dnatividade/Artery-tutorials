//
// Generated file, do not edit! Created by nedtool 5.7 from /home/veins/artery/extern/inet/src/inet/transportlayer/rtp/RTCPPacket1.msg.
//

#ifndef __INET__RTP_RTCPPACKET1_M_H
#define __INET__RTP_RTCPPACKET1_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0507
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// cplusplus {{
#include "inet/common/INETDefs.h"
// }}


namespace inet {
namespace rtp {

/**
 * Enum generated from <tt>/home/veins/artery/extern/inet/src/inet/transportlayer/rtp/RTCPPacket1.msg:25</tt> by nedtool.
 * <pre>
 * enum RTCPPacketType
 * {
 *     RTCP_PT_UNDEF = 0; // default value undefined
 *     RTCP_PT_SR = 200; // sender report
 *     RTCP_PT_RR = 201; // receiver report
 *     RTCP_PT_SDES = 202; // source description
 *     RTCP_PT_BYE = 203; // bye
 * }
 * </pre>
 */
enum RTCPPacketType {
    RTCP_PT_UNDEF = 0,
    RTCP_PT_SR = 200,
    RTCP_PT_RR = 201,
    RTCP_PT_SDES = 202,
    RTCP_PT_BYE = 203
};

/**
 * Class generated from <tt>/home/veins/artery/extern/inet/src/inet/transportlayer/rtp/RTCPPacket1.msg:34</tt> by nedtool.
 * <pre>
 * packet RTCPPacket
 * {
 *     byteLength = 4;
 *     \@customize(true);  // see the generated C++ header for more info
 *     int8 version = 2;
 *     bool padding = 0;
 *     short count = 0;
 *     short packetType \@enum(RTCPPacketType) = RTCP_PT_UNDEF;
 *     abstract int rtcpLength;
 * }
 * </pre>
 *
 * RTCPPacket_Base is only useful if it gets subclassed, and RTCPPacket is derived from it.
 * The minimum code to be written for RTCPPacket is the following:
 *
 * <pre>
 * class RTCPPacket : public RTCPPacket_Base
 * {
 *   private:
 *     void copy(const RTCPPacket& other) { ... }

 *   public:
 *     RTCPPacket(const char *name=nullptr, short kind=0) : RTCPPacket_Base(name,kind) {}
 *     RTCPPacket(const RTCPPacket& other) : RTCPPacket_Base(other) {copy(other);}
 *     RTCPPacket& operator=(const RTCPPacket& other) {if (this==&other) return *this; RTCPPacket_Base::operator=(other); copy(other); return *this;}
 *     virtual RTCPPacket *dup() const override {return new RTCPPacket(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from RTCPPacket_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(RTCPPacket)
 * </pre>
 */
class RTCPPacket_Base : public ::omnetpp::cPacket
{
  protected:
    int8_t version;
    bool padding;
    short count;
    short packetType;

  private:
    void copy(const RTCPPacket_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const RTCPPacket_Base&);
    // make constructors protected to avoid instantiation
    RTCPPacket_Base(const char *name=nullptr, short kind=0);
    RTCPPacket_Base(const RTCPPacket_Base& other);
    // make assignment operator protected to force the user override it
    RTCPPacket_Base& operator=(const RTCPPacket_Base& other);

  public:
    virtual ~RTCPPacket_Base();
    virtual RTCPPacket_Base *dup() const override {throw omnetpp::cRuntimeError("You forgot to manually add a dup() function to class RTCPPacket");}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int8_t getVersion() const;
    virtual void setVersion(int8_t version);
    virtual bool getPadding() const;
    virtual void setPadding(bool padding);
    virtual short getCount() const;
    virtual void setCount(short count);
    virtual short getPacketType() const;
    virtual void setPacketType(short packetType);
    virtual int getRtcpLength() const = 0;
    virtual void setRtcpLength(int rtcpLength) = 0;
};

/**
 * Class generated from <tt>/home/veins/artery/extern/inet/src/inet/transportlayer/rtp/RTCPPacket1.msg:45</tt> by nedtool.
 * <pre>
 * packet RTCPCompoundPacket
 * {
 *     byteLength = 0;
 *     \@customize(true);  // see the generated C++ header for more info
 *     cArray rtcpPackets;
 * }
 * </pre>
 *
 * RTCPCompoundPacket_Base is only useful if it gets subclassed, and RTCPCompoundPacket is derived from it.
 * The minimum code to be written for RTCPCompoundPacket is the following:
 *
 * <pre>
 * class RTCPCompoundPacket : public RTCPCompoundPacket_Base
 * {
 *   private:
 *     void copy(const RTCPCompoundPacket& other) { ... }

 *   public:
 *     RTCPCompoundPacket(const char *name=nullptr, short kind=0) : RTCPCompoundPacket_Base(name,kind) {}
 *     RTCPCompoundPacket(const RTCPCompoundPacket& other) : RTCPCompoundPacket_Base(other) {copy(other);}
 *     RTCPCompoundPacket& operator=(const RTCPCompoundPacket& other) {if (this==&other) return *this; RTCPCompoundPacket_Base::operator=(other); copy(other); return *this;}
 *     virtual RTCPCompoundPacket *dup() const override {return new RTCPCompoundPacket(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from RTCPCompoundPacket_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(RTCPCompoundPacket)
 * </pre>
 */
class RTCPCompoundPacket_Base : public ::omnetpp::cPacket
{
  protected:
    cArray rtcpPackets;

  private:
    void copy(const RTCPCompoundPacket_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const RTCPCompoundPacket_Base&);
    // make constructors protected to avoid instantiation
    RTCPCompoundPacket_Base(const char *name=nullptr, short kind=0);
    RTCPCompoundPacket_Base(const RTCPCompoundPacket_Base& other);
    // make assignment operator protected to force the user override it
    RTCPCompoundPacket_Base& operator=(const RTCPCompoundPacket_Base& other);

  public:
    virtual ~RTCPCompoundPacket_Base();
    virtual RTCPCompoundPacket_Base *dup() const override {throw omnetpp::cRuntimeError("You forgot to manually add a dup() function to class RTCPCompoundPacket");}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual cArray& getRtcpPackets();
    virtual const cArray& getRtcpPackets() const {return const_cast<RTCPCompoundPacket_Base*>(this)->getRtcpPackets();}
    virtual void setRtcpPackets(const cArray& rtcpPackets);
};

} // namespace rtp
} // namespace inet

#endif // ifndef __INET__RTP_RTCPPACKET1_M_H

