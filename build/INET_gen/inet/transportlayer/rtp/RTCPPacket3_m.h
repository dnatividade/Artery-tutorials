//
// Generated file, do not edit! Created by nedtool 5.7 from /home/veins/artery/extern/inet/src/inet/transportlayer/rtp/RTCPPacket3.msg.
//

#ifndef __INET__RTP_RTCPPACKET3_M_H
#define __INET__RTP_RTCPPACKET3_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0507
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// cplusplus {{
#include "inet/transportlayer/rtp/RTCPPacket2.h"
#include "inet/transportlayer/rtp/reports.h"
#include "inet/transportlayer/rtp/sdes.h"
// }}


namespace inet {
namespace rtp {

/**
 * Class generated from <tt>/home/veins/artery/extern/inet/src/inet/transportlayer/rtp/RTCPPacket3.msg:28</tt> by nedtool.
 * <pre>
 * packet RTCPSenderReportPacket extends RTCPReceiverReportPacket
 * {
 *     packetType = RTCP_PT_SR;
 *     \@customize(true);  // see the generated C++ header for more info
 *     SenderReport senderReport;
 * }
 * </pre>
 *
 * RTCPSenderReportPacket_Base is only useful if it gets subclassed, and RTCPSenderReportPacket is derived from it.
 * The minimum code to be written for RTCPSenderReportPacket is the following:
 *
 * <pre>
 * class RTCPSenderReportPacket : public RTCPSenderReportPacket_Base
 * {
 *   private:
 *     void copy(const RTCPSenderReportPacket& other) { ... }

 *   public:
 *     RTCPSenderReportPacket(const char *name=nullptr, short kind=0) : RTCPSenderReportPacket_Base(name,kind) {}
 *     RTCPSenderReportPacket(const RTCPSenderReportPacket& other) : RTCPSenderReportPacket_Base(other) {copy(other);}
 *     RTCPSenderReportPacket& operator=(const RTCPSenderReportPacket& other) {if (this==&other) return *this; RTCPSenderReportPacket_Base::operator=(other); copy(other); return *this;}
 *     virtual RTCPSenderReportPacket *dup() const override {return new RTCPSenderReportPacket(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from RTCPSenderReportPacket_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(RTCPSenderReportPacket)
 * </pre>
 */
class RTCPSenderReportPacket_Base : public ::inet::rtp::RTCPReceiverReportPacket
{
  protected:
    SenderReport senderReport;

  private:
    void copy(const RTCPSenderReportPacket_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const RTCPSenderReportPacket_Base&);
    // make constructors protected to avoid instantiation
    RTCPSenderReportPacket_Base(const char *name=nullptr, short kind=0);
    RTCPSenderReportPacket_Base(const RTCPSenderReportPacket_Base& other);
    // make assignment operator protected to force the user override it
    RTCPSenderReportPacket_Base& operator=(const RTCPSenderReportPacket_Base& other);

  public:
    virtual ~RTCPSenderReportPacket_Base();
    virtual RTCPSenderReportPacket_Base *dup() const override {throw omnetpp::cRuntimeError("You forgot to manually add a dup() function to class RTCPSenderReportPacket");}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual SenderReport& getSenderReport();
    virtual const SenderReport& getSenderReport() const {return const_cast<RTCPSenderReportPacket_Base*>(this)->getSenderReport();}
    virtual void setSenderReport(const SenderReport& senderReport);
};

} // namespace rtp
} // namespace inet

#endif // ifndef __INET__RTP_RTCPPACKET3_M_H

