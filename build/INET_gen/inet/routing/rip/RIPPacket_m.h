//
// Generated file, do not edit! Created by nedtool 5.7 from /home/veins/artery/extern/inet/src/inet/routing/rip/RIPPacket.msg.
//

#ifndef __INET_RIPPACKET_M_H
#define __INET_RIPPACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0507
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// cplusplus {{
#include "inet/networklayer/common/L3Address.h"
// }}


namespace inet {

// cplusplus {{
const int RIP_HEADER_SIZE = 4;
const int RIP_RTE_SIZE = 20;
// }}

/**
 * Enum generated from <tt>/home/veins/artery/extern/inet/src/inet/routing/rip/RIPPacket.msg:35</tt> by nedtool.
 * <pre>
 * //
 * // RIP commands
 * //
 * enum RIPCommand
 * {
 *     RIP_REQUEST = 1;
 *     RIP_RESPONSE = 2;
 * }
 * </pre>
 */
enum RIPCommand {
    RIP_REQUEST = 1,
    RIP_RESPONSE = 2
};

/**
 * Enum generated from <tt>/home/veins/artery/extern/inet/src/inet/routing/rip/RIPPacket.msg:43</tt> by nedtool.
 * <pre>
 * //
 * // Address Family constants
 * //
 * enum RIP_AF
 * {
 *     RIP_AF_NONE = 0;
 *     RIP_AF_INET = 2;
 *     // RIP_AF_AUTH = 0xFFFF;
 * }
 * </pre>
 */
enum RIP_AF {
    RIP_AF_NONE = 0,
    RIP_AF_INET = 2
};

/**
 * Struct generated from /home/veins/artery/extern/inet/src/inet/routing/rip/RIPPacket.msg:55 by nedtool.
 */
struct RIPEntry
{
    RIPEntry();
    unsigned short addressFamilyId;
    unsigned short routeTag;
    L3Address address;
    int prefixLength;
    L3Address nextHop;
    unsigned int metric;
};

// helpers for local use
void __doPacking(omnetpp::cCommBuffer *b, const RIPEntry& a);
void __doUnpacking(omnetpp::cCommBuffer *b, RIPEntry& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RIPEntry& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RIPEntry& obj) { __doUnpacking(b, obj); }

/**
 * Class generated from <tt>/home/veins/artery/extern/inet/src/inet/routing/rip/RIPPacket.msg:69</tt> by nedtool.
 * <pre>
 * //
 * // RIPv2 packet
 * //
 * // note: Authentication entry is not allowed
 * //
 * packet RIPPacket
 * {
 *     unsigned char command \@enum(RIPCommand);
 *     // version is fixed: 2
 *     RIPEntry entry[];
 * }
 * </pre>
 */
class RIPPacket : public ::omnetpp::cPacket
{
  protected:
    unsigned char command;
    RIPEntry *entry; // array ptr
    unsigned int entry_arraysize;

  private:
    void copy(const RIPPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const RIPPacket&);

  public:
    RIPPacket(const char *name=nullptr, short kind=0);
    RIPPacket(const RIPPacket& other);
    virtual ~RIPPacket();
    RIPPacket& operator=(const RIPPacket& other);
    virtual RIPPacket *dup() const override {return new RIPPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual unsigned char getCommand() const;
    virtual void setCommand(unsigned char command);
    virtual void setEntryArraySize(unsigned int size);
    virtual unsigned int getEntryArraySize() const;
    virtual RIPEntry& getEntry(unsigned int k);
    virtual const RIPEntry& getEntry(unsigned int k) const {return const_cast<RIPPacket*>(this)->getEntry(k);}
    virtual void setEntry(unsigned int k, const RIPEntry& entry);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RIPPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RIPPacket& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_RIPPACKET_M_H

