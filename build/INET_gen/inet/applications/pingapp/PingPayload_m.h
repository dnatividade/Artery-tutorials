//
// Generated file, do not edit! Created by nedtool 5.7 from /home/veins/artery/extern/inet/src/inet/applications/pingapp/PingPayload.msg.
//

#ifndef __INET_PINGPAYLOAD_M_H
#define __INET_PINGPAYLOAD_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0507
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// cplusplus {{
#include "inet/common/INETDefs.h"
// }}


namespace inet {

/**
 * Class generated from <tt>/home/veins/artery/extern/inet/src/inet/applications/pingapp/PingPayload.msg:30</tt> by nedtool.
 * <pre>
 * //
 * // Represents payload in an ICMP/ICMPv6 Echo Request/Reply.
 * //
 * // TODO: move originator id and sequence number to ICMPMessage and use an ICMPControlInfo
 * packet PingPayload
 * {
 *     long originatorId; // sender module id
 *     long seqNo; // sequence number
 *     unsigned char data[];
 * }
 * </pre>
 */
class PingPayload : public ::omnetpp::cPacket
{
  protected:
    long originatorId;
    long seqNo;
    unsigned char *data; // array ptr
    unsigned int data_arraysize;

  private:
    void copy(const PingPayload& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PingPayload&);

  public:
    PingPayload(const char *name=nullptr, short kind=0);
    PingPayload(const PingPayload& other);
    virtual ~PingPayload();
    PingPayload& operator=(const PingPayload& other);
    virtual PingPayload *dup() const override {return new PingPayload(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual long getOriginatorId() const;
    virtual void setOriginatorId(long originatorId);
    virtual long getSeqNo() const;
    virtual void setSeqNo(long seqNo);
    virtual void setDataArraySize(unsigned int size);
    virtual unsigned int getDataArraySize() const;
    virtual unsigned char getData(unsigned int k) const;
    virtual void setData(unsigned int k, unsigned char data);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PingPayload& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PingPayload& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_PINGPAYLOAD_M_H

