//
// Generated file, do not edit! Created by nedtool 5.7 from /home/veins/artery/extern/inet/src/inet/networklayer/rsvp_te/SignallingMsg.msg.
//

#ifndef __INET_SIGNALLINGMSG_M_H
#define __INET_SIGNALLINGMSG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0507
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// cplusplus {{
#include "inet/networklayer/contract/ipv4/IPv4Address.h"
#include "inet/networklayer/rsvp_te/IntServ.h"

#define MSG_PSB_TIMER               1
#define MSG_PSB_TIMEOUT             2

#define MSG_RSB_REFRESH_TIMER       3
#define MSG_RSB_COMMIT_TIMER        4
#define MSG_RSB_TIMEOUT             5

#define MSG_HELLO_TIMER             6
#define MSG_HELLO_TIMEOUT           7

#define MSG_PATH_NOTIFY             8

#define PATH_CREATED                1
#define PATH_UNFEASIBLE             2
#define PATH_FAILED                 3
#define PATH_PREEMPTED              4
#define PATH_RETRY                  5
// }}


namespace inet {

/**
 * Class generated from <tt>/home/veins/artery/extern/inet/src/inet/networklayer/rsvp_te/SignallingMsg.msg:51</tt> by nedtool.
 * <pre>
 * //
 * // FIXME missing documentation
 * //
 * message SignallingMsg
 * {
 *     int command = 0;
 * }
 * </pre>
 */
class SignallingMsg : public ::omnetpp::cMessage
{
  protected:
    int command;

  private:
    void copy(const SignallingMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SignallingMsg&);

  public:
    SignallingMsg(const char *name=nullptr, short kind=0);
    SignallingMsg(const SignallingMsg& other);
    virtual ~SignallingMsg();
    SignallingMsg& operator=(const SignallingMsg& other);
    virtual SignallingMsg *dup() const override {return new SignallingMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getCommand() const;
    virtual void setCommand(int command);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SignallingMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SignallingMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>/home/veins/artery/extern/inet/src/inet/networklayer/rsvp_te/SignallingMsg.msg:59</tt> by nedtool.
 * <pre>
 * //
 * // FIXME missing documentation
 * //
 * message PsbTimerMsg extends SignallingMsg
 * {
 *     int id;
 * 
 *     command = MSG_PSB_TIMER;
 * }
 * </pre>
 */
class PsbTimerMsg : public ::inet::SignallingMsg
{
  protected:
    int id;

  private:
    void copy(const PsbTimerMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PsbTimerMsg&);

  public:
    PsbTimerMsg(const char *name=nullptr, short kind=0);
    PsbTimerMsg(const PsbTimerMsg& other);
    virtual ~PsbTimerMsg();
    PsbTimerMsg& operator=(const PsbTimerMsg& other);
    virtual PsbTimerMsg *dup() const override {return new PsbTimerMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getId() const;
    virtual void setId(int id);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PsbTimerMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PsbTimerMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>/home/veins/artery/extern/inet/src/inet/networklayer/rsvp_te/SignallingMsg.msg:69</tt> by nedtool.
 * <pre>
 * //
 * // FIXME missing documentation
 * //
 * message PsbTimeoutMsg extends SignallingMsg
 * {
 *     int id;
 * 
 *     command = MSG_PSB_TIMEOUT;
 * }
 * </pre>
 */
class PsbTimeoutMsg : public ::inet::SignallingMsg
{
  protected:
    int id;

  private:
    void copy(const PsbTimeoutMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PsbTimeoutMsg&);

  public:
    PsbTimeoutMsg(const char *name=nullptr, short kind=0);
    PsbTimeoutMsg(const PsbTimeoutMsg& other);
    virtual ~PsbTimeoutMsg();
    PsbTimeoutMsg& operator=(const PsbTimeoutMsg& other);
    virtual PsbTimeoutMsg *dup() const override {return new PsbTimeoutMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getId() const;
    virtual void setId(int id);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PsbTimeoutMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PsbTimeoutMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>/home/veins/artery/extern/inet/src/inet/networklayer/rsvp_te/SignallingMsg.msg:79</tt> by nedtool.
 * <pre>
 * //
 * // FIXME missing documentation
 * //
 * message RsbRefreshTimerMsg extends SignallingMsg
 * {
 *     int id;
 * 
 *     command = MSG_RSB_REFRESH_TIMER;
 * }
 * </pre>
 */
class RsbRefreshTimerMsg : public ::inet::SignallingMsg
{
  protected:
    int id;

  private:
    void copy(const RsbRefreshTimerMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const RsbRefreshTimerMsg&);

  public:
    RsbRefreshTimerMsg(const char *name=nullptr, short kind=0);
    RsbRefreshTimerMsg(const RsbRefreshTimerMsg& other);
    virtual ~RsbRefreshTimerMsg();
    RsbRefreshTimerMsg& operator=(const RsbRefreshTimerMsg& other);
    virtual RsbRefreshTimerMsg *dup() const override {return new RsbRefreshTimerMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getId() const;
    virtual void setId(int id);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RsbRefreshTimerMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RsbRefreshTimerMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>/home/veins/artery/extern/inet/src/inet/networklayer/rsvp_te/SignallingMsg.msg:89</tt> by nedtool.
 * <pre>
 * //
 * // FIXME missing documentation
 * //
 * message RsbCommitTimerMsg extends SignallingMsg
 * {
 *     int id;
 * 
 *     command = MSG_RSB_COMMIT_TIMER;
 * }
 * </pre>
 */
class RsbCommitTimerMsg : public ::inet::SignallingMsg
{
  protected:
    int id;

  private:
    void copy(const RsbCommitTimerMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const RsbCommitTimerMsg&);

  public:
    RsbCommitTimerMsg(const char *name=nullptr, short kind=0);
    RsbCommitTimerMsg(const RsbCommitTimerMsg& other);
    virtual ~RsbCommitTimerMsg();
    RsbCommitTimerMsg& operator=(const RsbCommitTimerMsg& other);
    virtual RsbCommitTimerMsg *dup() const override {return new RsbCommitTimerMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getId() const;
    virtual void setId(int id);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RsbCommitTimerMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RsbCommitTimerMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>/home/veins/artery/extern/inet/src/inet/networklayer/rsvp_te/SignallingMsg.msg:99</tt> by nedtool.
 * <pre>
 * //
 * // FIXME missing documentation
 * //
 * message RsbTimeoutMsg extends SignallingMsg
 * {
 *     int id;
 * 
 *     command = MSG_RSB_TIMEOUT;
 * }
 * </pre>
 */
class RsbTimeoutMsg : public ::inet::SignallingMsg
{
  protected:
    int id;

  private:
    void copy(const RsbTimeoutMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const RsbTimeoutMsg&);

  public:
    RsbTimeoutMsg(const char *name=nullptr, short kind=0);
    RsbTimeoutMsg(const RsbTimeoutMsg& other);
    virtual ~RsbTimeoutMsg();
    RsbTimeoutMsg& operator=(const RsbTimeoutMsg& other);
    virtual RsbTimeoutMsg *dup() const override {return new RsbTimeoutMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getId() const;
    virtual void setId(int id);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RsbTimeoutMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RsbTimeoutMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>/home/veins/artery/extern/inet/src/inet/networklayer/rsvp_te/SignallingMsg.msg:109</tt> by nedtool.
 * <pre>
 * //
 * // FIXME missing documentation
 * //
 * message HelloTimerMsg extends SignallingMsg
 * {
 *     IPv4Address peer;
 * 
 *     command = MSG_HELLO_TIMER;
 * }
 * </pre>
 */
class HelloTimerMsg : public ::inet::SignallingMsg
{
  protected:
    IPv4Address peer;

  private:
    void copy(const HelloTimerMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const HelloTimerMsg&);

  public:
    HelloTimerMsg(const char *name=nullptr, short kind=0);
    HelloTimerMsg(const HelloTimerMsg& other);
    virtual ~HelloTimerMsg();
    HelloTimerMsg& operator=(const HelloTimerMsg& other);
    virtual HelloTimerMsg *dup() const override {return new HelloTimerMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual IPv4Address& getPeer();
    virtual const IPv4Address& getPeer() const {return const_cast<HelloTimerMsg*>(this)->getPeer();}
    virtual void setPeer(const IPv4Address& peer);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const HelloTimerMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, HelloTimerMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>/home/veins/artery/extern/inet/src/inet/networklayer/rsvp_te/SignallingMsg.msg:119</tt> by nedtool.
 * <pre>
 * //
 * // FIXME missing documentation
 * //
 * message HelloTimeoutMsg extends SignallingMsg
 * {
 *     IPv4Address peer;
 * 
 *     command = MSG_HELLO_TIMEOUT;
 * }
 * </pre>
 */
class HelloTimeoutMsg : public ::inet::SignallingMsg
{
  protected:
    IPv4Address peer;

  private:
    void copy(const HelloTimeoutMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const HelloTimeoutMsg&);

  public:
    HelloTimeoutMsg(const char *name=nullptr, short kind=0);
    HelloTimeoutMsg(const HelloTimeoutMsg& other);
    virtual ~HelloTimeoutMsg();
    HelloTimeoutMsg& operator=(const HelloTimeoutMsg& other);
    virtual HelloTimeoutMsg *dup() const override {return new HelloTimeoutMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual IPv4Address& getPeer();
    virtual const IPv4Address& getPeer() const {return const_cast<HelloTimeoutMsg*>(this)->getPeer();}
    virtual void setPeer(const IPv4Address& peer);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const HelloTimeoutMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, HelloTimeoutMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>/home/veins/artery/extern/inet/src/inet/networklayer/rsvp_te/SignallingMsg.msg:129</tt> by nedtool.
 * <pre>
 * //
 * // FIXME missing documentation
 * //
 * message PathNotifyMsg extends SignallingMsg
 * {
 *     SessionObj_t session;
 *     SenderTemplateObj_t sender;
 * 
 *     int status;
 * 
 *     command = MSG_PATH_NOTIFY;
 * }
 * </pre>
 */
class PathNotifyMsg : public ::inet::SignallingMsg
{
  protected:
    SessionObj_t session;
    SenderTemplateObj_t sender;
    int status;

  private:
    void copy(const PathNotifyMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PathNotifyMsg&);

  public:
    PathNotifyMsg(const char *name=nullptr, short kind=0);
    PathNotifyMsg(const PathNotifyMsg& other);
    virtual ~PathNotifyMsg();
    PathNotifyMsg& operator=(const PathNotifyMsg& other);
    virtual PathNotifyMsg *dup() const override {return new PathNotifyMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual SessionObj_t& getSession();
    virtual const SessionObj_t& getSession() const {return const_cast<PathNotifyMsg*>(this)->getSession();}
    virtual void setSession(const SessionObj_t& session);
    virtual SenderTemplateObj_t& getSender();
    virtual const SenderTemplateObj_t& getSender() const {return const_cast<PathNotifyMsg*>(this)->getSender();}
    virtual void setSender(const SenderTemplateObj_t& sender);
    virtual int getStatus() const;
    virtual void setStatus(int status);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PathNotifyMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PathNotifyMsg& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_SIGNALLINGMSG_M_H

