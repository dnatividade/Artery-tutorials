//
// Generated file, do not edit! Created by nedtool 5.7 from /home/veins/artery/extern/inet/src/inet/networklayer/rsvp_te/RSVPHello.msg.
//

#ifndef __INET_RSVPHELLO_M_H
#define __INET_RSVPHELLO_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0507
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// cplusplus {{
#include "inet/networklayer/rsvp_te/RSVPPacket.h"
// }}


namespace inet {

/**
 * Class generated from <tt>/home/veins/artery/extern/inet/src/inet/networklayer/rsvp_te/RSVPHello.msg:30</tt> by nedtool.
 * <pre>
 * //
 * // FIXME missing documentation
 * //
 * packet RSVPHelloMsg extends RSVPMessage
 * {
 *     \@customize(true);
 *     bool request;
 *     bool ack;
 * 
 *     int srcInstance;
 *     int dstInstance;
 * 
 *     rsvpKind = HELLO_MESSAGE;
 * }
 * </pre>
 *
 * RSVPHelloMsg_Base is only useful if it gets subclassed, and RSVPHelloMsg is derived from it.
 * The minimum code to be written for RSVPHelloMsg is the following:
 *
 * <pre>
 * class RSVPHelloMsg : public RSVPHelloMsg_Base
 * {
 *   private:
 *     void copy(const RSVPHelloMsg& other) { ... }

 *   public:
 *     RSVPHelloMsg(const char *name=nullptr, short kind=0) : RSVPHelloMsg_Base(name,kind) {}
 *     RSVPHelloMsg(const RSVPHelloMsg& other) : RSVPHelloMsg_Base(other) {copy(other);}
 *     RSVPHelloMsg& operator=(const RSVPHelloMsg& other) {if (this==&other) return *this; RSVPHelloMsg_Base::operator=(other); copy(other); return *this;}
 *     virtual RSVPHelloMsg *dup() const override {return new RSVPHelloMsg(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from RSVPHelloMsg_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(RSVPHelloMsg)
 * </pre>
 */
class RSVPHelloMsg_Base : public ::inet::RSVPMessage
{
  protected:
    bool request;
    bool ack;
    int srcInstance;
    int dstInstance;

  private:
    void copy(const RSVPHelloMsg_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const RSVPHelloMsg_Base&);
    // make constructors protected to avoid instantiation
    RSVPHelloMsg_Base(const char *name=nullptr, short kind=0);
    RSVPHelloMsg_Base(const RSVPHelloMsg_Base& other);
    // make assignment operator protected to force the user override it
    RSVPHelloMsg_Base& operator=(const RSVPHelloMsg_Base& other);

  public:
    virtual ~RSVPHelloMsg_Base();
    virtual RSVPHelloMsg_Base *dup() const override {throw omnetpp::cRuntimeError("You forgot to manually add a dup() function to class RSVPHelloMsg");}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual bool getRequest() const;
    virtual void setRequest(bool request);
    virtual bool getAck() const;
    virtual void setAck(bool ack);
    virtual int getSrcInstance() const;
    virtual void setSrcInstance(int srcInstance);
    virtual int getDstInstance() const;
    virtual void setDstInstance(int dstInstance);
};

} // namespace inet

#endif // ifndef __INET_RSVPHELLO_M_H

