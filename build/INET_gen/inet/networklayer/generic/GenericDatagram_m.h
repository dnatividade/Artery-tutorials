//
// Generated file, do not edit! Created by nedtool 5.7 from /home/veins/artery/extern/inet/src/inet/networklayer/generic/GenericDatagram.msg.
//

#ifndef __INET_GENERICDATAGRAM_M_H
#define __INET_GENERICDATAGRAM_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0507
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// cplusplus {{
#include "inet/common/TLVOption.h"
#include "inet/networklayer/common/L3Address.h"
#include "inet/networklayer/common/IPProtocolId_m.h"
// }}


namespace inet {

/**
 * Enum generated from <tt>/home/veins/artery/extern/inet/src/inet/networklayer/generic/GenericDatagram.msg:35</tt> by nedtool.
 * <pre>
 * //
 * // Generic protocol TLV option types
 * //
 * enum GenericTLVOptionTypes
 * {
 *     GENERIC_TLVOPTION_NOP1 = 0;
 *     GENERIC_TLVOPTION_NOPN = 1;
 *     GENERIC_TLVOPTION_TLV_GPSR = 47;
 * }
 * </pre>
 */
enum GenericTLVOptionTypes {
    GENERIC_TLVOPTION_NOP1 = 0,
    GENERIC_TLVOPTION_NOPN = 1,
    GENERIC_TLVOPTION_TLV_GPSR = 47
};

/**
 * Class generated from <tt>/home/veins/artery/extern/inet/src/inet/networklayer/generic/GenericDatagram.msg:47</tt> by nedtool.
 * <pre>
 * //
 * // Represents a generic network datagram with generic network addresses. 
 * //
 * packet GenericDatagram
 * {
 *     \@customize(true);
 *     L3Address sourceAddress \@getter(_getSrcAddr);
 *     L3Address destinationAddress \@getter(_getDestAddr);
 *     int transportProtocol \@enum(IPProtocolId) = IP_PROT_NONE;
 *     short hopLimit;
 *     TLVOptions tlvOptions;
 * }
 * </pre>
 *
 * GenericDatagram_Base is only useful if it gets subclassed, and GenericDatagram is derived from it.
 * The minimum code to be written for GenericDatagram is the following:
 *
 * <pre>
 * class GenericDatagram : public GenericDatagram_Base
 * {
 *   private:
 *     void copy(const GenericDatagram& other) { ... }

 *   public:
 *     GenericDatagram(const char *name=nullptr, short kind=0) : GenericDatagram_Base(name,kind) {}
 *     GenericDatagram(const GenericDatagram& other) : GenericDatagram_Base(other) {copy(other);}
 *     GenericDatagram& operator=(const GenericDatagram& other) {if (this==&other) return *this; GenericDatagram_Base::operator=(other); copy(other); return *this;}
 *     virtual GenericDatagram *dup() const override {return new GenericDatagram(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from GenericDatagram_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(GenericDatagram)
 * </pre>
 */
class GenericDatagram_Base : public ::omnetpp::cPacket
{
  protected:
    L3Address sourceAddress;
    L3Address destinationAddress;
    int transportProtocol;
    short hopLimit;
    TLVOptions tlvOptions;

  private:
    void copy(const GenericDatagram_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const GenericDatagram_Base&);
    // make constructors protected to avoid instantiation
    GenericDatagram_Base(const char *name=nullptr, short kind=0);
    GenericDatagram_Base(const GenericDatagram_Base& other);
    // make assignment operator protected to force the user override it
    GenericDatagram_Base& operator=(const GenericDatagram_Base& other);

  public:
    virtual ~GenericDatagram_Base();
    virtual GenericDatagram_Base *dup() const override {throw omnetpp::cRuntimeError("You forgot to manually add a dup() function to class GenericDatagram");}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual L3Address& _getSrcAddr();
    virtual const L3Address& _getSrcAddr() const {return const_cast<GenericDatagram_Base*>(this)->_getSrcAddr();}
    virtual void setSourceAddress(const L3Address& sourceAddress);
    virtual L3Address& _getDestAddr();
    virtual const L3Address& _getDestAddr() const {return const_cast<GenericDatagram_Base*>(this)->_getDestAddr();}
    virtual void setDestinationAddress(const L3Address& destinationAddress);
    virtual int getTransportProtocol() const;
    virtual void setTransportProtocol(int transportProtocol);
    virtual short getHopLimit() const;
    virtual void setHopLimit(short hopLimit);
    virtual TLVOptions& getTlvOptions();
    virtual const TLVOptions& getTlvOptions() const {return const_cast<GenericDatagram_Base*>(this)->getTlvOptions();}
    virtual void setTlvOptions(const TLVOptions& tlvOptions);
};

} // namespace inet

#endif // ifndef __INET_GENERICDATAGRAM_M_H

